{ inputs, config, pkgs, ... }: {

  # --- --- --- DONE --- --- --- ---
  # /nixos/configuration.nix
  imports = [
    ./hardware-configuration.nix # Hardware scan, DO NOT TOUCH
    ./fonts.nix # Fonts packages
  ];
  # --- --- --- -==- --- --- --- ---


  # --- --- --- DONE --- --- --- ---
  # /nixos/modules/boot.nix
  boot = {
    supportedFilesystems = [ "ntfs" ];
    kernelPackages = pkgs.linuxPackages_latest;
    initrd.kernelModules = [ "amdgpu" ];
    loader = {
    	systemd-boot.enable = true;
    	efi.canTouchEfiVariables = true;
    };
  };
  # Mount HDD
  fileSystems."/mnt/hdd" = {
    device = "/dev/disk/by-uuid/ecbe9b51-e184-42ba-babe-33692373c6bb";
    fsType = "ext4";
    options = [ "nofail" ];
  };
  # Mount Win
  fileSystems."/mnt/win" = {
    device = "/dev/disk/by-uuid/F4806AFF806AC826";
    fsType = "ntfs";
    options = [ "nofail" ];
  };
  swapDevices = [ 
    {
      device = "/var/lib/swapfile";
      size = 8*1024;
    } 
  ];
  # --- --- --- -==- --- --- --- ---


  # --- --- --- DONE --- --- --- ---
  # /nixos/modules/virtualisation.nix
  virtualisation.docker.enable = true;
  # --- --- --- -==- --- --- --- ---


  # --- --- --- DONE --- --- --- ---
  # /nixos/modules/network.nix
  networking = {
  	hostName = "nixos";
  	networkmanager.enable = true;
  	# wireless.enable = true;  # Enables wireless support via wpa_supplicant.
    # Configure network proxy if necessary
  	# proxy.default = "http://user:password@proxy:port/";
  	# proxy.noProxy = "127.0.0.1,localhost,internal.domain";
  	extraHosts = ''
  	  127.0.0.1 account.jetbrains.com
  	  127.0.0.1 account.jetbrains.com:443
  	  127.0.0.1 entry.prod-eu.w3jbcom.aws.intellij.net
  	  127.0.0.1 jrebel.npegeek.com
  	  127.0.0.1 bs.studycoder.com
  	'';
  	firewall.extraCommands = ''
  	  iptables -A OUTPUT -p tcp -m string --string "account.jetbrains.com" --algo kmp -j REJECT
  	'';
  };
  # --- --- --- -==- --- --- --- ---


  # --- --- --- DONE --- --- --- ---
  # /nixos/configuration.nix
  time.timeZone = "Europe/Moscow";
  i18n = {
  	defaultLocale = "ru_RU.UTF-8";
  	extraLocaleSettings = {
  	  LC_ADDRESS = "ru_RU.UTF-8";
      LC_IDENTIFICATION = "ru_RU.UTF-8";
  	  LC_MEASUREMENT = "ru_RU.UTF-8";
  	  LC_MONETARY = "ru_RU.UTF-8";
  	  LC_NAME = "ru_RU.UTF-8";
  	  LC_NUMERIC = "ru_RU.UTF-8";
  	  LC_PAPER = "ru_RU.UTF-8";
  	  LC_TELEPHONE = "ru_RU.UTF-8";
      LC_TIME = "ru_RU.UTF-8";
  	};
  };
  # --- --- --- -==- --- --- --- ---


  # --- --- --- DONE --- --- --- ---
  # /nixos/modules/users.nix
  users.users.envizar = {
    isNormalUser = true;
    description = "envizar";
    extraGroups = [ "networkmanager" "wheel" "openrazer" "docker" ];
    packages = with pkgs; [];
  };
  # --- --- --- -==- --- --- --- ---


  # --- --- --- DONE --- --- --- ---
  # /nixos/configuration.nix
  nixpkgs.config.allowUnfree = true;
  nix = {
    settings = {
      experimental-features = [ "nix-command" "flakes" ];
      allowed-users = [ "envizar" ];
      auto-optimise-store = true;
    };
  	# Clean options in bootloader older than 7d
  	gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d";
    };
    optimise = {
      automatic = true;	
      dates = [ "03:45" ];
    };
  };
  # --- --- --- -==- --- --- --- ---


  # --- --- --- DONE --- --- --- ---
  # /nixos/modules/hyprland.nix
  programs.hyprland = {
  	enable = true;
  	xwayland.enable = true;
  	package = inputs.hyprland.packages.${pkgs.stdenv.hostPlatform.system}.hyprland;
  };
  # --- --- --- -==- --- --- --- ---

  
  programs.dconf = {
  	enable = true;
  }; 
  qt = {
    enable = true;
    platformTheme = "gnome";
    style = "adwaita-dark";
  };

  environment = {
    # Fix electron apps
  	sessionVariables.NIXOS_OZONE_WL = "1";
  	variables = {
  	  EDITOR = "nano";
  	  MOZ_ENABLE_WAYLAND = "1";
  	  LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath [ pkgs.udev ];
  	};
  	systemPackages = with pkgs; [
  	  fastfetch
  	  eza
  	  micro
  	  btop
  	  docker
  	  udisks
  	  git
  	  appimage-run
  	  gnome.adwaita-icon-theme
  	  unzip
  	  iptables
  	  dig
  	  unrar
  	  motrix
  	  ventoy
  	];
  };

  hardware.openrazer = {
    enable = true;
    users = ["envizar"];
  };


  # Sound setup
  sound.enable = false; # false because conflicts with Pipewire
  hardware.pulseaudio.enable = false;
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;
 
    # use the example session manager (no others are packaged yet so this is enabled by default,
    # no need to redefine it in your config for now)
    #media-session.enable = true;
  };

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. Itâ€˜s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.05"; # Did you read the comment?

}
